{"name":"Conceptr","tagline":"R Tools for Concept Hierarchies","body":"***\r\nPlease note that there is no initial release yet. Be careful if you use the \r\ncurrent development version as there are certain to be errors. If you are interested\r\nin using this package, feel free to add any comments and requests to the tickets.\r\n\r\nOh, and if you know of another package that already has this functionality, please \r\nlet me know. I started building because I could not find one and have no interest\r\nin re-inventing wheels.\r\n***\r\n\r\n# conceptr\r\nConcept hierarchies are common in many knowledge areas and applications of\r\nstatistics. They can be deceptively simple, as they are easy to intuit, but can\r\noffer annoying problems while working with them as data set. \r\n\r\nThis package was made with a specific concept hierarchy in mind where the\r\nhierarchy is represented by a table with id, concept-name and parent-id. This\r\nstructure that is often found in biological data, in competency data (Human \r\nResource Management) and business-inventories. \r\n\r\nA typical example could be as follows:\r\n\r\n    Level1:      A           B           C          D\r\n                 |           |           |     \r\n    Level2:    AA AB      BA BB BD      CA    \r\n               |                         |\r\n    Level3:   AAA                     CAA CAB\r\n                                       |\r\n    Level4:                          CABA\r\n\r\nThis kind of tree structure can be used for instance on hierarchies such as\r\ntree > Oak > White Oak. Or Technical Skills > Programming > R, or Sales > EMEA > \r\nEurope > Lithuania. These are also called multilevel classes, or multilevel\r\nfeatures (in Machine Learning applications). \r\n\r\nThe goal of the package `conceptr` package is to help you when you need to work\r\nwith these kinds of data by allowing you to make the hierarchy corresponding to\r\nthe data explicit so that it becomes easier to:\r\n\r\n1. Roll-up data into higher order concepts, even if they are implied but not\r\n   included in the data set itself. For example, you have White Oaks and\r\n   Chihuaha Oaks, but no entry for \"Oaks\". That higher order concept \"Oak\" is\r\n   implicit in the data set and can be added by summing sub-level concept.\r\n2. Visualize the hierarchies as a tree using network3D.\r\n3. Inspect the data to see whether it conforms with the given hierarchy\r\n4. Visualize data in the hierarchy using ternary diagrams.\r\n\r\n## Installation\r\nThe package is still far from complete, so please be mindful of errors if you\r\nare going to use this. By all means report or fix any issues that you may find.\r\n\r\nTo install makes sure you have the package `devtools` installed and run:\r\n\r\n    devtools::install_github(\"fvd/conceptr\")\r\n\r\n## Usage\r\n### Data formats\r\nThe library is still primitive and not tested for all possible exceptions. You\r\ncan help by reporting any issues you find with your data so that the package\r\ncan be made more generic.\r\n\r\nAt the moment a number of conventions are imposed:\r\n\r\n1. The `hierarchy` data frame has three columns with names `c(\"id\",\"name\",\r\n   \"parent_id\")`\r\n1. The column names in the `data` data frame need to match the names in\r\n   `hierarachy$name` \r\n\r\nNote that to match the names in the hierarchy and data data frames both the\r\n`hierarchy$name` column and column names in `data` will be normalized with\r\n`make.names`.\r\n\r\n## Features\r\n### Aggregate by name\r\nAggregate all data from all the sub-levels of a concept by summing the\r\nobservations. So in the example `aggregate_byname(D)` returns `D` and\r\n`aggregate_byname(B)` returns `B+BA+BB+BD`. We need to reference the hierarchy\r\nto use so the full example would be:\r\n\r\n     aggregate_byname(data, hierarchy, \"Level1-D\")\r\n \r\nand\r\n\r\n    aggregate_byname(data, hierarchy, \"Level1-B\")\r\n\r\nThe full names in the test data base include the levels, so Level1-A, Level2-AA\r\netc.\r\n\r\n### Ternary plots\r\nMake exploratory analysis of the data at different levels easier by plotting by\r\nname. \r\n\r\n    visualize_ternary(data, hierarchy, c(\"A\", \"BA\", \"CAA\"))\r\n \r\n### Planned \r\n\r\n* Visualize hierarchy (create tree with network3D)\r\n* Inspect hierarchy (check the structure of the hierarchy)\r\n\r\n## Example data\r\nThere is a small example data set included that you can compare to your own.\r\nPlease note that you preferably use R-style names (no spaces, no non-ascci) for\r\nthe column names in the data file. The package will `make.normal` any names\r\nthat it will find.\r\n\r\nTo load the test data from the inst folder in the package:\r\n\r\n    data <- read.csv(system.file(\"data.csv\", package=\"conceptr\"))\r\n    hierarchy <- read.csv(system.file(\"concept-hierarchy.csv\", package=\"conceptr\"))\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}